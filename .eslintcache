[{"/home/riya/kanban/src/index.js":"1","/home/riya/kanban/src/components/App.js":"2","/home/riya/kanban/src/store/index.js":"3","/home/riya/kanban/src/components/List.js":"4","/home/riya/kanban/src/components/ListCard.js":"5","/home/riya/kanban/src/reducers/index.js":"6","/home/riya/kanban/src/reducers/listReducer.js":"7","/home/riya/kanban/src/components/ActionButton.js":"8","/home/riya/kanban/src/actions/listActions.js":"9","/home/riya/kanban/src/actions/index.js":"10","/home/riya/kanban/src/actions/cardActions.js":"11","/home/riya/kanban/src/components/BoardView.js":"12","/home/riya/kanban/src/components/InputForm.js":"13","/home/riya/kanban/src/components/ListView.js":"14","/home/riya/kanban/src/components/TodoList.js":"15","/home/riya/kanban/src/components/TodoItem.js":"16"},{"size":513,"mtime":1607511055696,"results":"17","hashOfConfig":"18"},{"size":1807,"mtime":1607514994666,"results":"19","hashOfConfig":"18"},{"size":536,"mtime":1607511074369,"results":"20","hashOfConfig":"18"},{"size":4554,"mtime":1607512345140,"results":"21","hashOfConfig":"18"},{"size":3922,"mtime":1607512195102,"results":"22","hashOfConfig":"18"},{"size":140,"mtime":1607447669577,"results":"23","hashOfConfig":"18"},{"size":4648,"mtime":1607515837901,"results":"24","hashOfConfig":"18"},{"size":2895,"mtime":1607514816341,"results":"25","hashOfConfig":"18"},{"size":881,"mtime":1607439907584,"results":"26","hashOfConfig":"18"},{"size":312,"mtime":1607448768828,"results":"27","hashOfConfig":"18"},{"size":459,"mtime":1607448904140,"results":"28","hashOfConfig":"18"},{"size":1961,"mtime":1607493925258,"results":"29","hashOfConfig":"18"},{"size":1436,"mtime":1607514833553,"results":"30","hashOfConfig":"18"},{"size":2510,"mtime":1607515561646,"results":"31","hashOfConfig":"18"},{"size":475,"mtime":1607492302699,"results":"32","hashOfConfig":"18"},{"size":912,"mtime":1607515596430,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"132qd8z",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"36"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"36"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"36"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"36"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"36"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/riya/kanban/src/index.js",[],["72","73"],"/home/riya/kanban/src/components/App.js",[],"/home/riya/kanban/src/store/index.js",["74"],"import { createStore, applyMiddleware } from \"redux\";\nimport rootReducer from \"../reducers\";\nimport thunk from \"redux-thunk\";\n\nimport { persistStore, persistReducer } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\n\nconst persistConfig = {\n    key: \"root\",\n    storage\n};\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nexport default () => {\n    let store = createStore(persistedReducer, applyMiddleware(thunk));\n    let persistor = persistStore(store);\n    return { store, persistor };\n};","/home/riya/kanban/src/components/List.js",["75"],"import \"./App.css\"\nimport ListCard from \"./ListCard\"\nimport React, { useState, useEffect } from \"react\";\nimport ActionButton from \"./ActionButton\"\nimport { Droppable, Draggable } from \"react-beautiful-dnd\"\nimport styled from \"styled-components\";\nimport { faEdit } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { editTitle, deleteList } from \"../actions\";\nimport { Button, Dropdown } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport TextArea from \"react-textarea-autosize\";\n\n\n\nconst ListContainer = styled.div`\nborder-radius: 3px;\nwidth: 300px;\npadding: 10px;\ncursor: pointer;\nfont-family: 'Rubik', sans-serif;\n`\n\nconst List = ({ title, cards, listId, index, dispatch }) => {\n    const [isEditing, setIsEditing] = useState(false);\n    const [listTitle, setListTitle] = useState(title);\n    const [fixTitle, setFixTitle] = useState(title);\n\n\n    const handleFocus = e => {\n        e.target.select();\n    };\n\n    const handleChange = e => {\n        e.preventDefault();\n        setFixTitle(e.target.value);\n    };\n\n    const handleCancel = e => {\n        setIsEditing(false);\n        setFixTitle(listTitle);\n    };\n\n    const handleFinishEditing = e => {\n        setIsEditing(false);\n        setListTitle(fixTitle);\n        dispatch(editTitle(listId, listTitle));\n    };\n\n    const handleDeleteList = () => {\n        dispatch(deleteList(listId));\n    };\n\n\n    const renderEditInput = () => {\n        return (\n            <div>\n                <form >\n                    <TextArea\n                        placeholder=\"Enter title\"\n                        onFocus={handleFocus}\n                        value={fixTitle}\n                        onChange={handleChange}\n                        style={{ resize: \"none\", width: \"100%\", outline: \"none\", border: \"none \", borderRadius: \"6px\" }}\n                    />\n                </form>\n                <div className=\"mt-2\">\n                    <Button variant=\"success\" onMouseDown={handleFinishEditing}>Update</Button>\n                    <Button className=\"close-button\" onClick={handleCancel}>X</Button>\n                </div>\n            </div >\n        );\n    };\n\n    return (\n        <Draggable draggableId={String(listId)} index={index}>\n            {provided => (\n                <ListContainer className=\"list-style\" {...provided.draggableProps} ref={provided.innerRef} {...provided.dragHandleProps}>\n                    <Droppable droppableId={String(listId)} type=\"card\">\n                        {provided => (\n                            <div {...provided.droppableProps} ref={provided.innerRef}>\n                                <div className=\"p-2\">\n                                    {isEditing ? renderEditInput() : (\n                                        <div className=\"d-flex justify-content-between mr-1\"> <h3>{listTitle}</h3>\n                                            <Dropdown>\n                                                <Dropdown.Toggle id=\"dropdown-no-caret\"\n                                                    className=\"dropdown\">\n                                                    <FontAwesomeIcon\n                                                        icon={faEdit}\n                                                        size=\"1x\"\n                                                        color=\"gray\"\n                                                    />\n                                                </Dropdown.Toggle>\n\n                                                <Dropdown.Menu>\n                                                    <Dropdown.Item onClick={() => setIsEditing(true)}>Edit</Dropdown.Item>\n                                                    <Dropdown.Item onClick={() => handleDeleteList()}>Delete</Dropdown.Item>\n                                                </Dropdown.Menu>\n                                            </Dropdown>\n                                        </div>)}\n\n                                </div>\n                                {cards.map((i, index) => (\n                                    <ListCard listId={listId} index={index} key={i.id} text={i.text} id={i.id} />\n                                ))}\n                                {provided.placeholder}\n                                <ActionButton listId={listId} />\n                            </div>\n                        )}\n                    </Droppable>\n                </ListContainer>\n            )}\n        </Draggable >\n    )\n}\n\nexport default connect()(List);","/home/riya/kanban/src/components/ListCard.js",["76"],"import React, { useState } from \"react\";\nimport { Card } from \"react-bootstrap\";\nimport { Draggable } from \"react-beautiful-dnd\";\nimport styled from \"styled-components\";\nimport { faEllipsisV } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { Button, Dropdown } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport { editCard, deleteCard } from \"../actions\";\nimport InputForm from \"./InputForm\";\nimport TextArea from \"react-textarea-autosize\";\n\n\n\nconst CardContainer = styled.div`\npadding:4px;\nwhite-space: pre-line;\nfont-family: 'Rubik', sans-serif;\n`\nconst ListCard = ({ text, listId, id, index, dispatch }) => {\n    const [isEditing, setIsEditing] = useState(false);\n    const [cardText, setText] = useState(text);\n\n    const closeForm = e => {\n        setIsEditing(false);\n    };\n\n    const handleChange = e => {\n        setText(e.target.value);\n    };\n\n    const saveCard = e => {\n        e.preventDefault();\n        dispatch(editCard(id, listId, cardText));\n        setIsEditing(false);\n    };\n\n    const handleDeleteCard = e => {\n        dispatch(deleteCard(id, listId));\n    };\n\n    const renderEditForm = () => {\n        return (\n            <div className=\"p-1\">\n                <Card\n                    style={{ minHeight: 80, minWidth: 270 }}\n                >\n                    <TextArea\n                        placeholder=\"Enter text here\"\n                        autoFocus\n                        value={cardText}\n                        onChange={e => handleChange(e)}\n                        onBlur={closeForm}\n                        style={{ resize: \"none\", width: \"100%\", outline: \"none\", border: \"none \", borderRadius: \"6px\" }}\n                    />\n                </Card>\n                <div className=\"mt-2 mb-2\">\n                    <Button variant=\"success\" onMouseDown={saveCard}>Save</Button>\n                    <Button className=\"close-button\" onMouseDown={closeForm}>X</Button>\n                </div>\n            </div>\n        );\n    };\n\n    const renderCard = () => {\n        return (\n            <Draggable draggableId={String(id)} index={index}>\n                {provided => (\n                    <CardContainer ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps}>\n                        <Card\n                            key={id}\n                            listId={listId}\n                            className=\" card-style card-wrap\"\n                        >\n                            <Card.Body className=\"d-flex justify-content-between\">\n                                <div className=\"d-flex align-items-center p-3 col-md-10\">{text}</div>\n                                <div className=\"mr-3 dp-class\">\n                                    <Dropdown>\n                                        <Dropdown.Toggle className=\"dropdown\">\n                                            <FontAwesomeIcon\n                                                icon={faEllipsisV}\n                                                size=\"1x\"\n                                                color=\"gray\"\n                                            />\n                                        </Dropdown.Toggle>\n\n                                        <Dropdown.Menu>\n                                            <Dropdown.Item onClick={() => setIsEditing(true)}>Edit</Dropdown.Item>\n                                            <Dropdown.Item onClick={handleDeleteCard}>Delete</Dropdown.Item>\n                                        </Dropdown.Menu>\n                                    </Dropdown>\n                                </div>\n                            </Card.Body>\n                        </Card>\n                    </CardContainer>)}\n            </Draggable>\n        )\n\n    }\n\n    return isEditing ? renderEditForm() : renderCard();\n\n}\n\nexport default connect()(ListCard)","/home/riya/kanban/src/reducers/index.js",[],"/home/riya/kanban/src/reducers/listReducer.js",["77"],"/home/riya/kanban/src/components/ActionButton.js",["78","79","80"],"import React, { PureComponent } from \"react\";\nimport TextArea from \"react-textarea-autosize\";\nimport { Button, Card } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport { addList, addCard } from \"../actions\";\nimport InputForm from \"./InputForm\"\nclass ActionButton extends PureComponent {\n    state = {\n        formOpen: false,\n        text: \"\"\n    }\n\n    setOpen = () => {\n        this.setState({\n            formOpen: true\n        }\n        )\n    }\n\n    closeForm = () => {\n        this.setState({\n            formOpen: false\n        }\n        )\n    }\n\n    handleInputChange = e => {\n        this.setState({\n            text: e.target.value\n        });\n    };\n\n    handleAddList = () => {\n        const { dispatch } = this.props;\n        const { text } = this.state;\n        if (text) {\n            dispatch(addList(text))\n            this.setState({\n                text: \"\"\n            })\n        }\n    }\n\n    handleAddCard = () => {\n        const { dispatch, listId } = this.props;\n        const { text } = this.state;\n        if (text) {\n            dispatch(addCard(listId, text))\n            this.setState({\n                text: \"\"\n            })\n        }\n    }\n\n\n    renderAddButton = () => {\n        const { list } = this.props;\n        const buttonText = list ? \"Add another list\" : \"Add another card\"\n        return (\n            <div onClick={this.setOpen} className={list ? \"list-text  p-3 \" : \"card-txt mt-1 px-2 py-2 pb-2 mx-2\"}>\n                <div>+ {buttonText}</div>\n            </div>\n        );\n    };\n\n    renderForm = () => {\n        const { list } = this.props\n        const placeholder = list ? \"Enter List title\" : \"Write down your next task\";\n        const buttonTitle = list ? \"Add List\" : \"Add Card\";\n\n\n        return (\n            list ? (<div className=\"action-list\">\n                <InputForm placeholder={placeholder}\n                    buttonTitle={buttonTitle} handleAddList={this.handleAddList}\n                    text={this.state.text}\n                    onChange={this.handleInputChange}\n                    closeForm={this.closeForm}\n                    handleAddCard={this.handleAddCard}\n                    list={list ? list : \"\"}\n                /> </div>)\n                :\n                <div className=\"mt-2\">\n                    <InputForm placeholder={placeholder}\n                        buttonTitle={buttonTitle} handleAddList={this.handleAddList}\n                        text={this.state.text}\n                        onChange={this.handleInputChange}\n                        closeForm={this.closeForm}\n                        handleAddCard={this.handleAddCard}\n                        list={list ? list : \"\"}\n                    />\n                </div>\n\n        )\n    }\n\n    render() {\n        return this.state.formOpen ? this.renderForm() : this.renderAddButton();\n    }\n}\n\nexport default connect()(ActionButton);","/home/riya/kanban/src/actions/listActions.js",[],"/home/riya/kanban/src/actions/index.js",[],"/home/riya/kanban/src/actions/cardActions.js",[],"/home/riya/kanban/src/components/BoardView.js",[],"/home/riya/kanban/src/components/InputForm.js",["81","82","83","84"],"import React, { PureComponent } from \"react\";\nimport TextArea from \"react-textarea-autosize\";\nimport { Button, Card } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport { addList, addCard } from \"../actions\";\nimport { faTimes } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nconst InputForm = React.memo(\n    ({ list, text = \"\", onChange, closeForm, children, buttonTitle, placeholder, handleAddCard, handleAddList }) => {\n\n        const handleClick = () => {\n            list ? handleAddList() : handleAddCard()\n        }\n\n        return (<div>\n            <Card\n                style={{ minHeight: 40, minWidth: 280 }}\n            >\n                <TextArea\n                    placeholder={placeholder}\n                    autoFocus\n                    value={text}\n                    onChange={e => onChange(e)}\n                    onBlur={closeForm}\n                    style={{ resize: \"none\", width: \"100%\", outline: \"none\", border: \"none \" }}\n                />\n            </Card>\n            <div className=\"mt-2 mb-2\">\n                <Button variant=\"success\" onMouseDown={handleClick}>{buttonTitle}</Button>\n                <Button className=\"close-button\" ><FontAwesomeIcon\n                    icon={faTimes}\n                    color=\"white\"\n                /></Button>\n            </div>\n        </div>)\n    }\n)\n\nexport default InputForm","/home/riya/kanban/src/components/ListView.js",[],"/home/riya/kanban/src/components/TodoList.js",[],"/home/riya/kanban/src/components/TodoItem.js",[],{"ruleId":"85","replacedBy":"86"},{"ruleId":"87","replacedBy":"88"},{"ruleId":"89","severity":1,"message":"90","line":15,"column":1,"nodeType":"91","endLine":19,"endColumn":3},{"ruleId":"92","severity":1,"message":"93","line":3,"column":27,"nodeType":"94","messageId":"95","endLine":3,"endColumn":36},{"ruleId":"92","severity":1,"message":"96","line":10,"column":8,"nodeType":"94","messageId":"95","endLine":10,"endColumn":17},{"ruleId":"92","severity":1,"message":"97","line":59,"column":21,"nodeType":"94","messageId":"95","endLine":59,"endColumn":32},{"ruleId":"92","severity":1,"message":"98","line":2,"column":8,"nodeType":"94","messageId":"95","endLine":2,"endColumn":16},{"ruleId":"92","severity":1,"message":"99","line":3,"column":10,"nodeType":"94","messageId":"95","endLine":3,"endColumn":16},{"ruleId":"92","severity":1,"message":"100","line":3,"column":18,"nodeType":"94","messageId":"95","endLine":3,"endColumn":22},{"ruleId":"92","severity":1,"message":"101","line":1,"column":17,"nodeType":"94","messageId":"95","endLine":1,"endColumn":30},{"ruleId":"92","severity":1,"message":"102","line":4,"column":10,"nodeType":"94","messageId":"95","endLine":4,"endColumn":17},{"ruleId":"92","severity":1,"message":"103","line":5,"column":10,"nodeType":"94","messageId":"95","endLine":5,"endColumn":17},{"ruleId":"92","severity":1,"message":"104","line":5,"column":19,"nodeType":"94","messageId":"95","endLine":5,"endColumn":26},"no-native-reassign",["105"],"no-negated-in-lhs",["106"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'InputForm' is defined but never used.","'draggableId' is assigned a value but never used.","'TextArea' is defined but never used.","'Button' is defined but never used.","'Card' is defined but never used.","'PureComponent' is defined but never used.","'connect' is defined but never used.","'addList' is defined but never used.","'addCard' is defined but never used.","no-global-assign","no-unsafe-negation"]