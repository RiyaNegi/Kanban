[{"/home/riya/kanban/src/index.js":"1","/home/riya/kanban/src/components/App.js":"2","/home/riya/kanban/src/store/index.js":"3","/home/riya/kanban/src/components/List.js":"4","/home/riya/kanban/src/components/ListCard.js":"5","/home/riya/kanban/src/reducers/index.js":"6","/home/riya/kanban/src/reducers/listReducer.js":"7","/home/riya/kanban/src/components/ActionButton.js":"8","/home/riya/kanban/src/actions/listActions.js":"9","/home/riya/kanban/src/actions/index.js":"10","/home/riya/kanban/src/actions/cardActions.js":"11","/home/riya/kanban/src/components/BoardView.js":"12","/home/riya/kanban/src/components/InputForm.js":"13","/home/riya/kanban/src/components/ListView.js":"14","/home/riya/kanban/src/components/TodoList.js":"15","/home/riya/kanban/src/components/TodoItem.js":"16"},{"size":513,"mtime":1607511055696,"results":"17","hashOfConfig":"18"},{"size":1983,"mtime":1607511709033,"results":"19","hashOfConfig":"18"},{"size":536,"mtime":1607511074369,"results":"20","hashOfConfig":"18"},{"size":4554,"mtime":1607512345140,"results":"21","hashOfConfig":"18"},{"size":3922,"mtime":1607512195102,"results":"22","hashOfConfig":"18"},{"size":140,"mtime":1607447669577,"results":"23","hashOfConfig":"18"},{"size":4679,"mtime":1607458414054,"results":"24","hashOfConfig":"18"},{"size":2775,"mtime":1607509918471,"results":"25","hashOfConfig":"18"},{"size":881,"mtime":1607439907584,"results":"26","hashOfConfig":"18"},{"size":312,"mtime":1607448768828,"results":"27","hashOfConfig":"18"},{"size":459,"mtime":1607448904140,"results":"28","hashOfConfig":"18"},{"size":1961,"mtime":1607493925258,"results":"29","hashOfConfig":"18"},{"size":1194,"mtime":1607496914246,"results":"30","hashOfConfig":"18"},{"size":2511,"mtime":1607492250008,"results":"31","hashOfConfig":"18"},{"size":475,"mtime":1607492302699,"results":"32","hashOfConfig":"18"},{"size":885,"mtime":1607510323505,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"132qd8z",{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"46"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"46"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"46"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"/home/riya/kanban/src/index.js",[],"/home/riya/kanban/src/components/App.js",["70"],"/home/riya/kanban/src/store/index.js",["71"],"/home/riya/kanban/src/components/List.js",["72"],"/home/riya/kanban/src/components/ListCard.js",["73"],"/home/riya/kanban/src/reducers/index.js",[],["74","75"],"/home/riya/kanban/src/reducers/listReducer.js",["76"],"import uuid from 'react-uuid'\nimport { CONSTANTS } from \"../actions\"\n\nconst InitialState = [\n    {\n        title: \"To-do\",\n        id: uuid(),\n        cards: [\n            {\n                id: uuid(),\n                text: \"Bring milk from grocery store\"\n            },\n            {\n                id: uuid(),\n                text: \"Review project thesis\"\n            }\n        ]\n    }\n]\n\nconst listReducer = (state = InitialState, action) => {\n    switch (action.type) {\n        case CONSTANTS.ADD_LIST:\n            const newList = {\n                title: action.payload,\n                id: uuid(),\n                cards: []\n            }\n            return [...state, newList]\n        case CONSTANTS.ADD_CARD:\n            console.log(\"m here in reducer\", action.payload)\n            {\n                const newCard = {\n                    text: action.payload.text,\n                    id: uuid()\n                }\n                const newState = JSON.parse(JSON.stringify(state)).map(i => {\n                    if (i.id === action.payload.listId) {\n                        return {\n                            ...i,\n                            cards: [...i.cards, newCard]\n                        };\n                    }\n                    else {\n                        return i\n                    }\n                })\n                console.log(\"m here in reducer so check state:\", newState)\n                return newState\n            }\n        case CONSTANTS.DRAG_HAPPENED:\n            {\n                const { droppableIdStart,\n                    droppableIdEnd,\n                    droppableIndexStart,\n                    droppableIndexEnd,\n                    draggableId,\n                    type\n                } = action.payload;\n\n                const newDragState = [...state];\n                if (type === \"list\") {\n                    const list = newDragState.splice(droppableIndexStart, 1);\n                    newDragState.splice(droppableIndexEnd, 0, ...list);\n                    return newDragState\n                }\n\n                if (droppableIdStart === droppableIdEnd) {\n                    const list = state.find(list => droppableIdStart === list.id)\n                    const card = list.cards.splice(droppableIndexStart, 1)\n                    list.cards.splice(droppableIndexEnd, 0, ...card)\n                }\n                if (droppableIdStart !== droppableIdEnd) {\n                    const listStart = state.find(list => droppableIdStart === list.id);\n                    const card = listStart.cards.splice(droppableIndexStart, 1);\n                    const listEnd = state.find(list => droppableIdEnd === list.id)\n                    listEnd.cards.splice(droppableIndexEnd, 0, ...card);\n                }\n                return newDragState\n            }\n        case CONSTANTS.EDIT_LIST_TITLE: {\n            const { listId, newTitle } = action.payload;\n            let elementPos = state.map(function (x) { return x.id; }).indexOf(listId);\n            const list = state[elementPos];\n            list.title = newTitle;\n            const newListState = state.map(i => i)\n            return newListState;\n        }\n        case CONSTANTS.DELETE_LIST: {\n            const { listId } = action.payload;\n            const newDelState = JSON.parse(JSON.stringify(state));\n            let elementPos = state.map(function (x) { return x.id; }).indexOf(listId);\n            newDelState.splice(elementPos, 1)\n            return newDelState;\n        }\n        case CONSTANTS.EDIT_CARD: {\n            const { id, newText, listId } = action.payload;\n            const newCardState = JSON.parse(JSON.stringify(state));\n            let elementPos = newCardState.map(function (x) {\n                return x.id;\n            }).indexOf(listId);\n            let cardPos = newCardState[elementPos].cards.map(function (x) { return x.id; }).indexOf(id);\n            const card = newCardState[elementPos].cards[cardPos];\n            card.text = newText;\n            return newCardState\n        }\n        case CONSTANTS.DELETE_CARD: {\n            const { listId, id } = action.payload;\n            console.log(\"m here bitch listId:\", listId, \"id:\", id)\n            const newCardDelState = JSON.parse(JSON.stringify(state));\n            let elementPos = newCardDelState.map(function (x) {\n                return x.id;\n            }).indexOf(listId);\n            let cardPos = newCardDelState[elementPos].cards.map(function (x) { return x.id; }).indexOf(id);\n            newCardDelState[elementPos].cards.splice(cardPos, 1)\n\n            return newCardDelState;\n        }\n        default:\n            return state;\n    }\n}\n\nexport default listReducer;","/home/riya/kanban/src/components/ActionButton.js",["77","78","79"],"import React, { PureComponent } from \"react\";\nimport TextArea from \"react-textarea-autosize\";\nimport { Button, Card } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport { addList, addCard } from \"../actions\";\nimport InputForm from \"./InputForm\"\nclass ActionButton extends PureComponent {\n    state = {\n        formOpen: false,\n        text: \"\"\n    }\n\n    setOpen = () => {\n        this.setState({\n            formOpen: true\n        }\n        )\n    }\n\n    closeForm = () => {\n        this.setState({\n            formOpen: false\n        }\n        )\n    }\n\n    handleInputChange = e => {\n        this.setState({\n            text: e.target.value\n        });\n    };\n\n    handleAddList = () => {\n        const { dispatch } = this.props;\n        const { text } = this.state;\n        if (text) {\n            dispatch(addList(text))\n            this.setState({\n                text: \"\"\n            })\n        }\n    }\n\n    handleAddCard = () => {\n        const { dispatch, listId } = this.props;\n        const { text } = this.state;\n        if (text) {\n            dispatch(addCard(listId, text))\n            this.setState({\n                text: \"\"\n            })\n        }\n    }\n\n\n    renderAddButton = () => {\n        const { list } = this.props;\n        const buttonText = list ? \"Add another list\" : \"Add another card\"\n        return (\n            <div onClick={this.setOpen} className={list ? \"list-text  p-3 \" : \"card-txt mt-1 px-2 py-2 pb-2 mx-2\"}>\n                <div>+ {buttonText}</div>\n            </div>\n        );\n    };\n\n    renderForm = () => {\n        const { list } = this.props\n        const placeholder = list ? \"Enter List tile\" : \"Enter Card title\";\n        const buttonTitle = list ? \"Add List\" : \"Add Card\";\n\n\n        return (\n            list ? (<div className=\"action-list\">\n                <InputForm placeholder={placeholder}\n                    buttonTitle={buttonTitle} handleAddList={this.handleAddList}\n                    text={this.state.text}\n                    onChange={this.handleInputChange}\n                    closeForm={this.closeForm}\n                    handleAddCard={this.handleAddCard}\n                    list={list ? list : \"\"}\n                /> </div>)\n                : <InputForm placeholder={placeholder}\n                    buttonTitle={buttonTitle} handleAddList={this.handleAddList}\n                    text={this.state.text}\n                    onChange={this.handleInputChange}\n                    closeForm={this.closeForm}\n                    handleAddCard={this.handleAddCard}\n                    list={list ? list : \"\"}\n                />\n\n        )\n    }\n\n    render() {\n        return this.state.formOpen ? this.renderForm() : this.renderAddButton();\n    }\n}\n\nexport default connect()(ActionButton);","/home/riya/kanban/src/actions/listActions.js",[],"/home/riya/kanban/src/actions/index.js",[],"/home/riya/kanban/src/actions/cardActions.js",[],"/home/riya/kanban/src/components/BoardView.js",[],"/home/riya/kanban/src/components/InputForm.js",["80","81","82","83"],"import React, { PureComponent } from \"react\";\nimport TextArea from \"react-textarea-autosize\";\nimport { Button, Card } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport { addList, addCard } from \"../actions\";\n\nconst InputForm = React.memo(\n    ({ list, text = \"\", onChange, closeForm, children, buttonTitle, placeholder, handleAddCard, handleAddList }) => {\n\n        const handleClick = () =>\n            list ? handleAddList() : handleAddCard()\n\n        return (<div>\n            <Card\n                style={{ minHeight: 80, minWidth: 270 }}\n            >\n                <TextArea\n                    placeholder={placeholder}\n                    autoFocus\n                    value={text}\n                    onChange={e => onChange(e)}\n                    onBlur={closeForm}\n                    style={{ resize: \"none\", width: \"100%\", outline: \"none\", border: \"none \" }}\n                />\n            </Card>\n            <div className=\"mt-2 mb-2\">\n                <Button variant=\"success\" onMouseDown={handleClick}>{buttonTitle}</Button>\n                <Button className=\"close-button\" >X</Button>\n            </div>\n        </div>)\n    }\n)\n\nexport default InputForm","/home/riya/kanban/src/components/ListView.js",[],"/home/riya/kanban/src/components/TodoList.js",[],"/home/riya/kanban/src/components/TodoItem.js",[],{"ruleId":"84","severity":1,"message":"85","line":6,"column":8,"nodeType":"86","messageId":"87","endLine":6,"endColumn":11},{"ruleId":"88","severity":1,"message":"89","line":15,"column":1,"nodeType":"90","endLine":19,"endColumn":3},{"ruleId":"84","severity":1,"message":"91","line":3,"column":27,"nodeType":"86","messageId":"87","endLine":3,"endColumn":36},{"ruleId":"84","severity":1,"message":"92","line":10,"column":8,"nodeType":"86","messageId":"87","endLine":10,"endColumn":17},{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","replacedBy":"96"},{"ruleId":"84","severity":1,"message":"97","line":57,"column":21,"nodeType":"86","messageId":"87","endLine":57,"endColumn":32},{"ruleId":"84","severity":1,"message":"98","line":2,"column":8,"nodeType":"86","messageId":"87","endLine":2,"endColumn":16},{"ruleId":"84","severity":1,"message":"99","line":3,"column":10,"nodeType":"86","messageId":"87","endLine":3,"endColumn":16},{"ruleId":"84","severity":1,"message":"100","line":3,"column":18,"nodeType":"86","messageId":"87","endLine":3,"endColumn":22},{"ruleId":"84","severity":1,"message":"101","line":1,"column":17,"nodeType":"86","messageId":"87","endLine":1,"endColumn":30},{"ruleId":"84","severity":1,"message":"102","line":4,"column":10,"nodeType":"86","messageId":"87","endLine":4,"endColumn":17},{"ruleId":"84","severity":1,"message":"103","line":5,"column":10,"nodeType":"86","messageId":"87","endLine":5,"endColumn":17},{"ruleId":"84","severity":1,"message":"104","line":5,"column":19,"nodeType":"86","messageId":"87","endLine":5,"endColumn":26},"no-unused-vars","'Pic' is defined but never used.","Identifier","unusedVar","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'useEffect' is defined but never used.","'InputForm' is defined but never used.","no-native-reassign",["105"],"no-negated-in-lhs",["106"],"'draggableId' is assigned a value but never used.","'TextArea' is defined but never used.","'Button' is defined but never used.","'Card' is defined but never used.","'PureComponent' is defined but never used.","'connect' is defined but never used.","'addList' is defined but never used.","'addCard' is defined but never used.","no-global-assign","no-unsafe-negation"]