[{"/home/riya/kanban/src/index.js":"1","/home/riya/kanban/src/components/App.js":"2","/home/riya/kanban/src/store/index.js":"3","/home/riya/kanban/src/components/List.js":"4","/home/riya/kanban/src/components/ListCard.js":"5","/home/riya/kanban/src/reducers/index.js":"6","/home/riya/kanban/src/reducers/listReducer.js":"7","/home/riya/kanban/src/components/ActionButton.js":"8","/home/riya/kanban/src/actions/listActions.js":"9","/home/riya/kanban/src/actions/index.js":"10","/home/riya/kanban/src/actions/cardActions.js":"11","/home/riya/kanban/src/components/BoardView.js":"12","/home/riya/kanban/src/components/InputForm.js":"13","/home/riya/kanban/src/components/ListView.js":"14","/home/riya/kanban/src/components/TodoList.js":"15","/home/riya/kanban/src/components/TodoItem.js":"16"},{"size":330,"mtime":1607439718896,"results":"17","hashOfConfig":"18"},{"size":886,"mtime":1607458703325,"results":"19","hashOfConfig":"18"},{"size":202,"mtime":1607439684300,"results":"20","hashOfConfig":"18"},{"size":4438,"mtime":1607442515807,"results":"21","hashOfConfig":"18"},{"size":3613,"mtime":1607449140925,"results":"22","hashOfConfig":"18"},{"size":140,"mtime":1607447669577,"results":"23","hashOfConfig":"18"},{"size":4679,"mtime":1607458414054,"results":"24","hashOfConfig":"18"},{"size":2260,"mtime":1607433040681,"results":"25","hashOfConfig":"18"},{"size":881,"mtime":1607439907584,"results":"26","hashOfConfig":"18"},{"size":312,"mtime":1607448768828,"results":"27","hashOfConfig":"18"},{"size":459,"mtime":1607448904140,"results":"28","hashOfConfig":"18"},{"size":1953,"mtime":1607439306111,"results":"29","hashOfConfig":"18"},{"size":1189,"mtime":1607433035473,"results":"30","hashOfConfig":"18"},{"size":2608,"mtime":1607459308824,"results":"31","hashOfConfig":"18"},{"size":458,"mtime":1607459192604,"results":"32","hashOfConfig":"18"},{"size":571,"mtime":1607459216072,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"132qd8z",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"36"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"36"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"36"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"36"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/riya/kanban/src/index.js",[],["71","72"],"/home/riya/kanban/src/components/App.js",[],"/home/riya/kanban/src/store/index.js",["73","74","75"],"import { createStore, applyMiddleware, compose } from \"redux\";\nimport reduxThunk from \"redux-thunk\";\nimport rootReducer from \"../reducers\"\n\n\nconst store = createStore(rootReducer)\n\nexport default store;","/home/riya/kanban/src/components/List.js",[],"/home/riya/kanban/src/components/ListCard.js",["76"],"import React, { useState } from \"react\";\nimport { Card } from \"react-bootstrap\";\nimport { Draggable } from \"react-beautiful-dnd\";\nimport styled from \"styled-components\";\nimport { faEllipsisV } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { Button, Dropdown } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport { editCard, deleteCard } from \"../actions\";\nimport InputForm from \"./InputForm\";\nimport TextArea from \"react-textarea-autosize\";\n\n\n\nconst CardContainer = styled.div`\npadding:5px;\n`\nconst ListCard = ({ text, listId, id, index, dispatch }) => {\n    const [isEditing, setIsEditing] = useState(false);\n    const [cardText, setText] = useState(text);\n\n    const closeForm = e => {\n        setIsEditing(false);\n    };\n\n    const handleChange = e => {\n        setText(e.target.value);\n    };\n\n    const saveCard = e => {\n        e.preventDefault();\n        dispatch(editCard(id, listId, cardText));\n        setIsEditing(false);\n    };\n\n    const handleDeleteCard = e => {\n        dispatch(deleteCard(id, listId));\n    };\n\n    const renderEditForm = () => {\n        return (\n            <div>\n                <Card\n                    style={{ minHeight: 80, minWidth: 270 }}\n                >\n                    <TextArea\n                        placeholder=\"Enter text here\"\n                        autoFocus\n                        value={cardText}\n                        onChange={e => handleChange(e)}\n                        onBlur={closeForm}\n                        style={{ resize: \"none\", width: \"100%\", outline: \"none\", border: \"none \" }}\n                    />\n                </Card>\n                <div className=\"mt-2\">\n                    <Button variant=\"success\" onMouseDown={saveCard}>Save</Button>\n                    <Button className=\"close-button\" onMouseDown={closeForm}>X</Button>\n                </div>\n            </div>\n        );\n    };\n\n    const renderCard = () => {\n        return (\n            <Draggable draggableId={String(id)} index={index}>\n                {provided => (\n                    <CardContainer ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps}>\n                        <Card\n                            key={id}\n                            listId={listId}\n                            className=\" card-style mb-2\"\n                        >\n                            <Card.Body className=\"d-flex justify-content-between\">\n                                <span>{text}</span>\n                                <Dropdown>\n                                    <Dropdown.Toggle className=\"dropdown\">\n                                        <FontAwesomeIcon\n                                            icon={faEllipsisV}\n                                            size=\"1x\"\n                                            color=\"gray\"\n                                        />\n                                    </Dropdown.Toggle>\n\n                                    <Dropdown.Menu>\n                                        <Dropdown.Item onClick={() => setIsEditing(true)}>Edit</Dropdown.Item>\n                                        <Dropdown.Item onClick={handleDeleteCard}>Delete</Dropdown.Item>\n                                    </Dropdown.Menu>\n                                </Dropdown>\n                            </Card.Body>\n                        </Card>\n                    </CardContainer>)}\n            </Draggable>\n        )\n\n    }\n\n    return isEditing ? renderEditForm() : renderCard();\n\n}\n\nexport default connect()(ListCard)","/home/riya/kanban/src/reducers/index.js",[],"/home/riya/kanban/src/reducers/listReducer.js",["77"],"/home/riya/kanban/src/components/ActionButton.js",["78","79","80"],"import React, { PureComponent } from \"react\";\nimport TextArea from \"react-textarea-autosize\";\nimport { Button, Card } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport { addList, addCard } from \"../actions\";\nimport InputForm from \"./InputForm\"\nclass ActionButton extends PureComponent {\n    state = {\n        formOpen: false,\n        text: \"\"\n    }\n\n    setOpen = () => {\n        this.setState({\n            formOpen: true\n        }\n        )\n    }\n\n    closeForm = () => {\n        this.setState({\n            formOpen: false\n        }\n        )\n    }\n\n    handleInputChange = e => {\n        this.setState({\n            text: e.target.value\n        });\n    };\n\n    handleAddList = () => {\n        const { dispatch } = this.props;\n        const { text } = this.state;\n        if (text) {\n            dispatch(addList(text))\n            this.setState({\n                text: \"\"\n            })\n        }\n    }\n\n    handleAddCard = () => {\n        const { dispatch, listId } = this.props;\n        const { text } = this.state;\n        if (text) {\n            dispatch(addCard(listId, text))\n            this.setState({\n                text: \"\"\n            })\n        }\n    }\n\n\n    renderAddButton = () => {\n        const { list } = this.props;\n        const buttonText = list ? \"Add another list\" : \"Add another card\"\n        return (\n            <div onClick={this.setOpen} className={list ? \"list-text  p-3\" : \"card-txt\"}>\n                <div>+ {buttonText}</div>\n            </div>\n        );\n    };\n\n    renderForm = () => {\n        const { list } = this.props\n        const placeholder = list ? \"Enter List tile\" : \"Enter Card title\";\n        const buttonTitle = list ? \"Add List\" : \"Add Card\";\n\n\n        return (\n            <InputForm handleAddList={this.handleAddList}\n                text={this.state.text}\n                onChange={this.handleInputChange}\n                closeForm={this.closeForm}\n                handleAddCard={this.handleAddCard}\n                list={list ? list : \"\"}\n            />\n        )\n    }\n\n    render() {\n        return this.state.formOpen ? this.renderForm() : this.renderAddButton();\n    }\n}\n\nexport default connect()(ActionButton);","/home/riya/kanban/src/actions/listActions.js",[],"/home/riya/kanban/src/actions/index.js",[],"/home/riya/kanban/src/actions/cardActions.js",[],"/home/riya/kanban/src/components/BoardView.js",[],"/home/riya/kanban/src/components/InputForm.js",["81","82","83","84","85"],"import React, { PureComponent } from \"react\";\nimport TextArea from \"react-textarea-autosize\";\nimport { Button, Card } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport { addList, addCard } from \"../actions\";\n\nconst InputForm = React.memo(\n    ({ list, text = \"\", onChange, closeForm, children, buttonTitle, placeholder, handleAddCard, handleAddList }) => {\n        const placeholder = list\n            ? \"Enter list title...\"\n            : \"Enter the text for this card...\";\n\n        const handleClick = () =>\n            list ? handleAddList() : handleAddCard()\n\n        return (<div>\n            <Card\n                style={{ minHeight: 80, minWidth: 270 }}\n            >\n                <TextArea\n                    placeholder={placeholder}\n                    autoFocus\n                    value={text}\n                    onChange={e => onChange(e)}\n                    onBlur={closeForm}\n                    style={{ resize: \"none\", width: \"100%\", outline: \"none\", border: \"none \" }}\n                />\n            </Card>\n            <div className=\"mt-2\">\n                <Button variant=\"success\" onMouseDown={handleClick}>{buttonTitle}</Button>\n                <Button className=\"close-button\" >X</Button>\n            </div>\n        </div>)\n    }\n)\n\nexport default InputForm","/home/riya/kanban/src/components/ListView.js",[],"/home/riya/kanban/src/components/TodoList.js",[],"/home/riya/kanban/src/components/TodoItem.js",[],{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","replacedBy":"89"},{"ruleId":"90","severity":1,"message":"91","line":1,"column":23,"nodeType":"92","messageId":"93","endLine":1,"endColumn":38},{"ruleId":"90","severity":1,"message":"94","line":1,"column":40,"nodeType":"92","messageId":"93","endLine":1,"endColumn":47},{"ruleId":"90","severity":1,"message":"95","line":2,"column":8,"nodeType":"92","messageId":"93","endLine":2,"endColumn":18},{"ruleId":"90","severity":1,"message":"96","line":10,"column":8,"nodeType":"92","messageId":"93","endLine":10,"endColumn":17},{"ruleId":"90","severity":1,"message":"97","line":57,"column":21,"nodeType":"92","messageId":"93","endLine":57,"endColumn":32},{"ruleId":"90","severity":1,"message":"98","line":2,"column":8,"nodeType":"92","messageId":"93","endLine":2,"endColumn":16},{"ruleId":"90","severity":1,"message":"99","line":3,"column":10,"nodeType":"92","messageId":"93","endLine":3,"endColumn":16},{"ruleId":"90","severity":1,"message":"100","line":3,"column":18,"nodeType":"92","messageId":"93","endLine":3,"endColumn":22},{"ruleId":"90","severity":1,"message":"101","line":1,"column":17,"nodeType":"92","messageId":"93","endLine":1,"endColumn":30},{"ruleId":"90","severity":1,"message":"102","line":4,"column":10,"nodeType":"92","messageId":"93","endLine":4,"endColumn":17},{"ruleId":"90","severity":1,"message":"103","line":5,"column":10,"nodeType":"92","messageId":"93","endLine":5,"endColumn":17},{"ruleId":"90","severity":1,"message":"104","line":5,"column":19,"nodeType":"92","messageId":"93","endLine":5,"endColumn":26},{"ruleId":"105","severity":1,"message":"106","line":9,"column":15,"nodeType":"92","messageId":"107","endLine":9,"endColumn":26},"no-native-reassign",["108"],"no-negated-in-lhs",["109"],"no-unused-vars","'applyMiddleware' is defined but never used.","Identifier","unusedVar","'compose' is defined but never used.","'reduxThunk' is defined but never used.","'InputForm' is defined but never used.","'draggableId' is assigned a value but never used.","'TextArea' is defined but never used.","'Button' is defined but never used.","'Card' is defined but never used.","'PureComponent' is defined but never used.","'connect' is defined but never used.","'addList' is defined but never used.","'addCard' is defined but never used.","no-redeclare","'placeholder' is already defined.","redeclared","no-global-assign","no-unsafe-negation"]