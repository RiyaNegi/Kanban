[{"/home/riya/kanban/src/index.js":"1","/home/riya/kanban/src/components/App.js":"2","/home/riya/kanban/src/store/index.js":"3","/home/riya/kanban/src/components/List.js":"4","/home/riya/kanban/src/components/ListCard.js":"5","/home/riya/kanban/src/reducers/index.js":"6","/home/riya/kanban/src/reducers/listReducer.js":"7","/home/riya/kanban/src/components/ActionButton.js":"8","/home/riya/kanban/src/actions/listActions.js":"9","/home/riya/kanban/src/actions/index.js":"10","/home/riya/kanban/src/actions/cardActions.js":"11","/home/riya/kanban/src/components/BoardView.js":"12","/home/riya/kanban/src/components/InputForm.js":"13","/home/riya/kanban/src/components/ListView.js":"14"},{"size":330,"mtime":1607439718896,"results":"15","hashOfConfig":"16"},{"size":897,"mtime":1607450519717,"results":"17","hashOfConfig":"16"},{"size":202,"mtime":1607439684300,"results":"18","hashOfConfig":"16"},{"size":4438,"mtime":1607442515807,"results":"19","hashOfConfig":"16"},{"size":3613,"mtime":1607449140925,"results":"20","hashOfConfig":"16"},{"size":140,"mtime":1607447669577,"results":"21","hashOfConfig":"16"},{"size":4448,"mtime":1607449246785,"results":"22","hashOfConfig":"16"},{"size":2260,"mtime":1607433040681,"results":"23","hashOfConfig":"16"},{"size":881,"mtime":1607439907584,"results":"24","hashOfConfig":"16"},{"size":312,"mtime":1607448768828,"results":"25","hashOfConfig":"16"},{"size":459,"mtime":1607448904140,"results":"26","hashOfConfig":"16"},{"size":1953,"mtime":1607439306111,"results":"27","hashOfConfig":"16"},{"size":1189,"mtime":1607433035473,"results":"28","hashOfConfig":"16"},{"size":538,"mtime":1607450705967,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"132qd8z",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"32"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"32"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"32"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"32"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"32"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/riya/kanban/src/index.js",[],["64","65"],"/home/riya/kanban/src/components/App.js",[],"/home/riya/kanban/src/store/index.js",["66","67","68"],"import { createStore, applyMiddleware, compose } from \"redux\";\nimport reduxThunk from \"redux-thunk\";\nimport rootReducer from \"../reducers\"\n\n\nconst store = createStore(rootReducer)\n\nexport default store;","/home/riya/kanban/src/components/List.js",[],"/home/riya/kanban/src/components/ListCard.js",["69"],"import React, { useState } from \"react\";\nimport { Card } from \"react-bootstrap\";\nimport { Draggable } from \"react-beautiful-dnd\";\nimport styled from \"styled-components\";\nimport { faEllipsisV } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { Button, Dropdown } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport { editCard, deleteCard } from \"../actions\";\nimport InputForm from \"./InputForm\";\nimport TextArea from \"react-textarea-autosize\";\n\n\n\nconst CardContainer = styled.div`\npadding:5px;\n`\nconst ListCard = ({ text, listId, id, index, dispatch }) => {\n    const [isEditing, setIsEditing] = useState(false);\n    const [cardText, setText] = useState(text);\n\n    const closeForm = e => {\n        setIsEditing(false);\n    };\n\n    const handleChange = e => {\n        setText(e.target.value);\n    };\n\n    const saveCard = e => {\n        e.preventDefault();\n        dispatch(editCard(id, listId, cardText));\n        setIsEditing(false);\n    };\n\n    const handleDeleteCard = e => {\n        dispatch(deleteCard(id, listId));\n    };\n\n    const renderEditForm = () => {\n        return (\n            <div>\n                <Card\n                    style={{ minHeight: 80, minWidth: 270 }}\n                >\n                    <TextArea\n                        placeholder=\"Enter text here\"\n                        autoFocus\n                        value={cardText}\n                        onChange={e => handleChange(e)}\n                        onBlur={closeForm}\n                        style={{ resize: \"none\", width: \"100%\", outline: \"none\", border: \"none \" }}\n                    />\n                </Card>\n                <div className=\"mt-2\">\n                    <Button variant=\"success\" onMouseDown={saveCard}>Save</Button>\n                    <Button className=\"close-button\" onMouseDown={closeForm}>X</Button>\n                </div>\n            </div>\n        );\n    };\n\n    const renderCard = () => {\n        return (\n            <Draggable draggableId={String(id)} index={index}>\n                {provided => (\n                    <CardContainer ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps}>\n                        <Card\n                            key={id}\n                            listId={listId}\n                            className=\" card-style mb-2\"\n                        >\n                            <Card.Body className=\"d-flex justify-content-between\">\n                                <span>{text}</span>\n                                <Dropdown>\n                                    <Dropdown.Toggle className=\"dropdown\">\n                                        <FontAwesomeIcon\n                                            icon={faEllipsisV}\n                                            size=\"1x\"\n                                            color=\"gray\"\n                                        />\n                                    </Dropdown.Toggle>\n\n                                    <Dropdown.Menu>\n                                        <Dropdown.Item onClick={() => setIsEditing(true)}>Edit</Dropdown.Item>\n                                        <Dropdown.Item onClick={handleDeleteCard}>Delete</Dropdown.Item>\n                                    </Dropdown.Menu>\n                                </Dropdown>\n                            </Card.Body>\n                        </Card>\n                    </CardContainer>)}\n            </Draggable>\n        )\n\n    }\n\n    return isEditing ? renderEditForm() : renderCard();\n\n}\n\nexport default connect()(ListCard)","/home/riya/kanban/src/reducers/index.js",[],"/home/riya/kanban/src/reducers/listReducer.js",["70"],"import uuid from 'react-uuid'\nimport { CONSTANTS } from \"../actions\"\n\nconst InitialState = [\n    {\n        title: \"To-do\",\n        id: uuid(),\n        cards: [\n            {\n                id: uuid(),\n                text: \"Bring milk from grocery store\"\n            },\n            {\n                id: uuid(),\n                text: \"Review project thesis\"\n            }\n        ]\n    }\n]\n\nconst listReducer = (state = InitialState, action) => {\n    switch (action.type) {\n        case CONSTANTS.ADD_LIST:\n            const newList = {\n                title: action.payload,\n                id: uuid(),\n                cards: []\n            }\n            return [...state, newList]\n        case CONSTANTS.ADD_CARD:\n            {\n                const newCard = {\n                    text: action.payload.text,\n                    id: uuid()\n                }\n                const newState = state.map(i => {\n                    if (i.id === action.payload.listId) {\n                        return {\n                            ...i,\n                            cards: [...i.cards, newCard]\n                        };\n                    }\n                    else {\n                        return i\n                    }\n                })\n                return newState\n            }\n        case CONSTANTS.DRAG_HAPPENED:\n            {\n                const { droppableIdStart,\n                    droppableIdEnd,\n                    droppableIndexStart,\n                    droppableIndexEnd,\n                    draggableId,\n                    type\n                } = action.payload;\n\n                const newDragState = [...state];\n                if (type === \"list\") {\n                    const list = newDragState.splice(droppableIndexStart, 1);\n                    newDragState.splice(droppableIndexEnd, 0, ...list);\n                    return newDragState\n                }\n\n                if (droppableIdStart === droppableIdEnd) {\n                    const list = state.find(list => droppableIdStart === list.id)\n                    const card = list.cards.splice(droppableIndexStart, 1)\n                    list.cards.splice(droppableIndexEnd, 0, ...card)\n                }\n                if (droppableIdStart !== droppableIdEnd) {\n                    const listStart = state.find(list => droppableIdStart === list.id);\n                    const card = listStart.cards.splice(droppableIndexStart, 1);\n                    const listEnd = state.find(list => droppableIdEnd === list.id)\n                    listEnd.cards.splice(droppableIndexEnd, 0, ...card);\n                }\n                return newDragState\n            }\n        case CONSTANTS.EDIT_LIST_TITLE: {\n            const { listId, newTitle } = action.payload;\n            let elementPos = state.map(function (x) { return x.id; }).indexOf(listId);\n            const list = state[elementPos];\n            list.title = newTitle;\n            const newListState = state.map(i => i)\n            return newListState;\n        }\n        case CONSTANTS.DELETE_LIST: {\n            const { listId } = action.payload;\n            const newDelState = JSON.parse(JSON.stringify(state));\n            let elementPos = state.map(function (x) { return x.id; }).indexOf(listId);\n            newDelState.splice(elementPos, 1)\n            return newDelState;\n        }\n        case CONSTANTS.EDIT_CARD: {\n            const { id, newText, listId } = action.payload;\n            const newCardState = JSON.parse(JSON.stringify(state));\n            let elementPos = newCardState.map(function (x) {\n                return x.id;\n            }).indexOf(listId);\n            let cardPos = newCardState[elementPos].cards.map(function (x) { return x.id; }).indexOf(id);\n            const card = newCardState[elementPos].cards[cardPos];\n            card.text = newText;\n            return newCardState\n        }\n        case CONSTANTS.DELETE_CARD: {\n            const { listId, id } = action.payload;\n            const newCardDelState = JSON.parse(JSON.stringify(state));\n            let elementPos = newCardDelState.map(function (x) {\n                return x.id;\n            }).indexOf(listId);\n            let cardPos = newCardDelState[elementPos].cards.map(function (x) { return x.id; }).indexOf(id);\n            newCardDelState[elementPos].cards.splice(cardPos, 1)\n\n            return newCardDelState;\n        }\n        default:\n            return state;\n    }\n}\n\nexport default listReducer;","/home/riya/kanban/src/components/ActionButton.js",["71","72","73"],"import React, { PureComponent } from \"react\";\nimport TextArea from \"react-textarea-autosize\";\nimport { Button, Card } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport { addList, addCard } from \"../actions\";\nimport InputForm from \"./InputForm\"\nclass ActionButton extends PureComponent {\n    state = {\n        formOpen: false,\n        text: \"\"\n    }\n\n    setOpen = () => {\n        this.setState({\n            formOpen: true\n        }\n        )\n    }\n\n    closeForm = () => {\n        this.setState({\n            formOpen: false\n        }\n        )\n    }\n\n    handleInputChange = e => {\n        this.setState({\n            text: e.target.value\n        });\n    };\n\n    handleAddList = () => {\n        const { dispatch } = this.props;\n        const { text } = this.state;\n        if (text) {\n            dispatch(addList(text))\n            this.setState({\n                text: \"\"\n            })\n        }\n    }\n\n    handleAddCard = () => {\n        const { dispatch, listId } = this.props;\n        const { text } = this.state;\n        if (text) {\n            dispatch(addCard(listId, text))\n            this.setState({\n                text: \"\"\n            })\n        }\n    }\n\n\n    renderAddButton = () => {\n        const { list } = this.props;\n        const buttonText = list ? \"Add another list\" : \"Add another card\"\n        return (\n            <div onClick={this.setOpen} className={list ? \"list-text  p-3\" : \"card-txt\"}>\n                <div>+ {buttonText}</div>\n            </div>\n        );\n    };\n\n    renderForm = () => {\n        const { list } = this.props\n        const placeholder = list ? \"Enter List tile\" : \"Enter Card title\";\n        const buttonTitle = list ? \"Add List\" : \"Add Card\";\n\n\n        return (\n            <InputForm handleAddList={this.handleAddList}\n                text={this.state.text}\n                onChange={this.handleInputChange}\n                closeForm={this.closeForm}\n                handleAddCard={this.handleAddCard}\n                list={list ? list : \"\"}\n            />\n        )\n    }\n\n    render() {\n        return this.state.formOpen ? this.renderForm() : this.renderAddButton();\n    }\n}\n\nexport default connect()(ActionButton);","/home/riya/kanban/src/actions/listActions.js",[],"/home/riya/kanban/src/actions/index.js",[],"/home/riya/kanban/src/actions/cardActions.js",[],"/home/riya/kanban/src/components/BoardView.js",[],"/home/riya/kanban/src/components/InputForm.js",["74","75","76","77","78"],"import React, { PureComponent } from \"react\";\nimport TextArea from \"react-textarea-autosize\";\nimport { Button, Card } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport { addList, addCard } from \"../actions\";\n\nconst InputForm = React.memo(\n    ({ list, text = \"\", onChange, closeForm, children, buttonTitle, placeholder, handleAddCard, handleAddList }) => {\n        const placeholder = list\n            ? \"Enter list title...\"\n            : \"Enter the text for this card...\";\n\n        const handleClick = () =>\n            list ? handleAddList() : handleAddCard()\n\n        return (<div>\n            <Card\n                style={{ minHeight: 80, minWidth: 270 }}\n            >\n                <TextArea\n                    placeholder={placeholder}\n                    autoFocus\n                    value={text}\n                    onChange={e => onChange(e)}\n                    onBlur={closeForm}\n                    style={{ resize: \"none\", width: \"100%\", outline: \"none\", border: \"none \" }}\n                />\n            </Card>\n            <div className=\"mt-2\">\n                <Button variant=\"success\" onMouseDown={handleClick}>{buttonTitle}</Button>\n                <Button className=\"close-button\" >X</Button>\n            </div>\n        </div>)\n    }\n)\n\nexport default InputForm","/home/riya/kanban/src/components/ListView.js",[],{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","severity":1,"message":"84","line":1,"column":23,"nodeType":"85","messageId":"86","endLine":1,"endColumn":38},{"ruleId":"83","severity":1,"message":"87","line":1,"column":40,"nodeType":"85","messageId":"86","endLine":1,"endColumn":47},{"ruleId":"83","severity":1,"message":"88","line":2,"column":8,"nodeType":"85","messageId":"86","endLine":2,"endColumn":18},{"ruleId":"83","severity":1,"message":"89","line":10,"column":8,"nodeType":"85","messageId":"86","endLine":10,"endColumn":17},{"ruleId":"83","severity":1,"message":"90","line":55,"column":21,"nodeType":"85","messageId":"86","endLine":55,"endColumn":32},{"ruleId":"83","severity":1,"message":"91","line":2,"column":8,"nodeType":"85","messageId":"86","endLine":2,"endColumn":16},{"ruleId":"83","severity":1,"message":"92","line":3,"column":10,"nodeType":"85","messageId":"86","endLine":3,"endColumn":16},{"ruleId":"83","severity":1,"message":"93","line":3,"column":18,"nodeType":"85","messageId":"86","endLine":3,"endColumn":22},{"ruleId":"83","severity":1,"message":"94","line":1,"column":17,"nodeType":"85","messageId":"86","endLine":1,"endColumn":30},{"ruleId":"83","severity":1,"message":"95","line":4,"column":10,"nodeType":"85","messageId":"86","endLine":4,"endColumn":17},{"ruleId":"83","severity":1,"message":"96","line":5,"column":10,"nodeType":"85","messageId":"86","endLine":5,"endColumn":17},{"ruleId":"83","severity":1,"message":"97","line":5,"column":19,"nodeType":"85","messageId":"86","endLine":5,"endColumn":26},{"ruleId":"98","severity":1,"message":"99","line":9,"column":15,"nodeType":"85","messageId":"100","endLine":9,"endColumn":26},"no-native-reassign",["101"],"no-negated-in-lhs",["102"],"no-unused-vars","'applyMiddleware' is defined but never used.","Identifier","unusedVar","'compose' is defined but never used.","'reduxThunk' is defined but never used.","'InputForm' is defined but never used.","'draggableId' is assigned a value but never used.","'TextArea' is defined but never used.","'Button' is defined but never used.","'Card' is defined but never used.","'PureComponent' is defined but never used.","'connect' is defined but never used.","'addList' is defined but never used.","'addCard' is defined but never used.","no-redeclare","'placeholder' is already defined.","redeclared","no-global-assign","no-unsafe-negation"]